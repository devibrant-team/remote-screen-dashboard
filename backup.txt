import axios from "axios";
import {
  updateSlideAtIndex,
  updateSlotInSlide,
  type PlaylistState,
} from "../../Redux/Playlist/ToolBarFunc/NormalPlaylistSlice";
import { useDispatch } from "react-redux";
import { store } from "../../../store";
import { PlaylistPostApi } from "../../API/API";

// Format and send playlist to backend
export const savePlaylistToDatabase = async (playlist: PlaylistState) => {
  const formData = new FormData();

  const totalDuration = playlist.slides.reduce(
    (sum, slide) => sum + (slide.duration || 0),
    0
  );

  // Basic fields
  formData.append("id", String(playlist.id));
  formData.append("name", playlist.name);
  formData.append("type", String(playlist.type));
  formData.append("NumberOfSlides", String(playlist.slides.length));
  formData.append("total_duration", String(totalDuration));

  // Add slides as structured fields
  playlist.slides.forEach((slide, slideIndex) => {
    formData.append(`slides[${slideIndex}][index]`, String(slideIndex));
    formData.append(
      `slides[${slideIndex}][duration]`,
      String(slide.duration || 0)
    );
    formData.append(
      `slides[${slideIndex}][grid_style]`,
      String(slide.grid_style)
    );

    slide.slots.forEach((slot, slotIndex) => {
      const mediaKey = `slides[${slideIndex}][slots][${slotIndex}][media]`;

      if (slot.media instanceof File) {
        formData.append(mediaKey, slot.media); // âœ… File will be handled properly
      } else {
        formData.append(mediaKey, slot.media || "");
      }

      formData.append(
        `slides[${slideIndex}][slots][${slotIndex}][index]`,
        String(slot.index)
      );
      formData.append(
        `slides[${slideIndex}][slots][${slotIndex}][mediaType]`,
        slot.mediaType || ""
      );
      formData.append(
        `slides[${slideIndex}][slots][${slotIndex}][scale]`,
        slot.scale || ""
      );
    });
  });

  const response = await axios.post(PlaylistPostApi, formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });

  return response.data;
};

// Format the payload structure
export const formatPlaylistPayload = (playlist: PlaylistState) => {
  const totalDuration = playlist.slides.reduce(
    (sum, slide) => sum + (slide.duration || 0),
    0
  );
  return {
    id: playlist.id,
    name: playlist.name,
    type: playlist.type,
    NumberOfSlides: playlist.slides.length,
    total_duration: totalDuration,
    slides: playlist.slides.map((slide, index) => {
      const { selectedGrid, ...slideWithoutSelectedGrid } = slide;
      return {
        ...slideWithoutSelectedGrid,
        index,
        grid_style: slide.grid_style,
      };
    }),
  };
};

export const useHandleMediaUpload = (selectedSlideIndex: number | null) => {
  const dispatch = useDispatch();

  const handleMediaUpload = (slotIndex: number, file: File) => {
    if (selectedSlideIndex === null) return;

    const media = file;
    const mediaType = file.type.startsWith("video") ? "video" : "image";

    if (mediaType === "video") {
      const video = document.createElement("video");
      video.preload = "metadata";
      video.src = URL.createObjectURL(media); // only for duration reading

      video.onloadedmetadata = () => {
        const uploadedDuration = Math.round(video.duration);
        console.log(
          `ðŸŽ¥ Uploaded video slot ${slotIndex} duration:`,
          uploadedDuration
        );

        dispatch(
          updateSlotInSlide({
            slideIndex: selectedSlideIndex,
            slotIndex,
            media, // âœ… the actual File
            mediaType,
          })
        );

        setTimeout(() => {
          const currentSlide =
            store.getState().playlist.slides[selectedSlideIndex];

          const durationPromises = currentSlide.slots
            .filter(
              (slot) => slot.mediaType === "video" && slot.media instanceof File
            )
            .map((slot) => {
              return new Promise<number>((resolve) => {
                if (!(slot.media instanceof File)) {
                  return resolve(0); // Skip if media is not a File
                }

                const tempVid = document.createElement("video");
                tempVid.preload = "metadata";
                tempVid.src = URL.createObjectURL(slot.media); // âœ… now safe
                tempVid.onloadedmetadata = () => resolve(tempVid.duration);
                tempVid.onerror = () => resolve(0);
              });
            });

          Promise.all(durationPromises).then((durations) => {
            const maxDuration = Math.round(
              Math.max(...durations, uploadedDuration)
            );
            console.log(
              "ðŸ•’ Final slide duration (longest video):",
              maxDuration
            );

            dispatch(
              updateSlideAtIndex({
                index: selectedSlideIndex,
                updatedSlide: {
                  ...currentSlide,
                  duration: maxDuration,
                },
              })
            );
          });
        }, 100);
      };
    } else {
      dispatch(
        updateSlotInSlide({
          slideIndex: selectedSlideIndex,
          slotIndex,
          media, // âœ… the actual File
          mediaType,
        })
      );
    }
  };

  return handleMediaUpload;
};















///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  "name": "userdashboard",
  "version": "1.1.1",
  "private": true,
  "description": "User Dashboard -application",
  "author": "Devibrant",
  "type": "module",
  "main": "electron/main.js",
  "scripts": {
    "dev": "concurrently \"vite\" \"wait-on http://localhost:5174 && cross-env NODE_ENV=development electron electron/main.js\"",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint .",
    "electron": "electron electron/main.js",
    "start": "npm run dev",
    "build:app": "vite build",
    "pack": "npm run build:app && electron-builder"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^2.8.2",
    "node-machine-id": "^1.1.12",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.6.3"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.5.2",
    "concurrently": "^9.2.0",
    "cross-env": "^7.0.3",
    "electron": "^37.2.0",
    "electron-builder": "^26.0.12",
    "eslint": "^9.29.0",
    "vite": "^7.0.0",
    "wait-on": "^8.0.3"
  },
  "build": {
    "appId": "com.devibrant.userdashboard",
    "productName": "User Dashboard",
    "files": [
      "electron/**/*",
      "**/*.js",
      {
        "from": "dist",
        "to": "dist",
        "filter": [
          "**/*"
        ]
      }
    ],
    "asar": true,
    "asarUnpack": [
      "dist/**"
    ],
    "directories": {
      "buildResources": "assets"
    },
    "extraMetadata": {
      "main": "electron/main.js"
    },
    "win": {
      "target": "nsis"
    },
    "nsis": {
      "oneClick": false,
      "allowToChangeInstallationDirectory": true,
      "shortcutName": "User Dashboard",
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    }
  }
}





/////////////////////////////////////////////////////////APP.TSX/////////////////////




import { useEffect, useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

// Extend Window interface to define electronAPI
declare global {
  interface Window {
    electronAPI?: {
      sendLog?: (...args: any[]) => void;
      getMachineId?: () => Promise<string>;
    };
  }
}

// Override console.log to forward logs to Electron main process
const originalConsoleLog = console.log;
console.log = (...args: unknown[]) => {
  if (window.electronAPI?.sendLog) {
    window.electronAPI.sendLog(...args);
  }
  originalConsoleLog(...args);
};

function App() {
  const [count, setCount] = useState<number>(0);
  const [machineId, setMachineId] = useState<string>('');
  const [error, setError] = useState<string>('');

  useEffect(() => {
    if (window.electronAPI?.getMachineId) {
      console.log('electronAPI object exists');
      console.log('electronAPI.getMachineId is', typeof window.electronAPI.getMachineId);

      window.electronAPI.getMachineId()
        .then((id: string) => {
          setMachineId(id);
        })
        .catch(() => {
          setError('Failed to get Machine ID');
        });
    } else {
      setError('electronAPI.getMachineId not available');
    }
  }, []);

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank" rel="noreferrer">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank" rel="noreferrer">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React + Electron</h1>
      <div className="card">
        <button onClick={() => setCount((c) => c + 1)}>
          count is {count}
        </button>
        <p>
          Machine ID: <code>{machineId || error || 'Loading...'}</code>
        </p>
      </div>
    </>
  );
}

export default App;
