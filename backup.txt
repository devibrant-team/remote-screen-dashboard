import axios from "axios";
import {
  updateSlideAtIndex,
  updateSlotInSlide,
  type PlaylistState,
} from "../../Redux/Playlist/ToolBarFunc/NormalPlaylistSlice";
import { useDispatch } from "react-redux";
import { store } from "../../../store";
import { PlaylistPostApi } from "../../API/API";

// Format and send playlist to backend
export const savePlaylistToDatabase = async (playlist: PlaylistState) => {
  const formData = new FormData();

  const totalDuration = playlist.slides.reduce(
    (sum, slide) => sum + (slide.duration || 0),
    0
  );

  // Basic fields
  formData.append("id", String(playlist.id));
  formData.append("name", playlist.name);
  formData.append("type", String(playlist.type));
  formData.append("NumberOfSlides", String(playlist.slides.length));
  formData.append("total_duration", String(totalDuration));

  // Add slides as structured fields
  playlist.slides.forEach((slide, slideIndex) => {
    formData.append(`slides[${slideIndex}][index]`, String(slideIndex));
    formData.append(
      `slides[${slideIndex}][duration]`,
      String(slide.duration || 0)
    );
    formData.append(
      `slides[${slideIndex}][grid_style]`,
      String(slide.grid_style)
    );

    slide.slots.forEach((slot, slotIndex) => {
      const mediaKey = `slides[${slideIndex}][slots][${slotIndex}][media]`;

      if (slot.media instanceof File) {
        formData.append(mediaKey, slot.media); // âœ… File will be handled properly
      } else {
        formData.append(mediaKey, slot.media || "");
      }

      formData.append(
        `slides[${slideIndex}][slots][${slotIndex}][index]`,
        String(slot.index)
      );
      formData.append(
        `slides[${slideIndex}][slots][${slotIndex}][mediaType]`,
        slot.mediaType || ""
      );
      formData.append(
        `slides[${slideIndex}][slots][${slotIndex}][scale]`,
        slot.scale || ""
      );
    });
  });

  const response = await axios.post(PlaylistPostApi, formData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });

  return response.data;
};

// Format the payload structure
export const formatPlaylistPayload = (playlist: PlaylistState) => {
  const totalDuration = playlist.slides.reduce(
    (sum, slide) => sum + (slide.duration || 0),
    0
  );
  return {
    id: playlist.id,
    name: playlist.name,
    type: playlist.type,
    NumberOfSlides: playlist.slides.length,
    total_duration: totalDuration,
    slides: playlist.slides.map((slide, index) => {
      const { selectedGrid, ...slideWithoutSelectedGrid } = slide;
      return {
        ...slideWithoutSelectedGrid,
        index,
        grid_style: slide.grid_style,
      };
    }),
  };
};

export const useHandleMediaUpload = (selectedSlideIndex: number | null) => {
  const dispatch = useDispatch();

  const handleMediaUpload = (slotIndex: number, file: File) => {
    if (selectedSlideIndex === null) return;

    const media = file;
    const mediaType = file.type.startsWith("video") ? "video" : "image";

    if (mediaType === "video") {
      const video = document.createElement("video");
      video.preload = "metadata";
      video.src = URL.createObjectURL(media); // only for duration reading

      video.onloadedmetadata = () => {
        const uploadedDuration = Math.round(video.duration);
        console.log(
          `ðŸŽ¥ Uploaded video slot ${slotIndex} duration:`,
          uploadedDuration
        );

        dispatch(
          updateSlotInSlide({
            slideIndex: selectedSlideIndex,
            slotIndex,
            media, // âœ… the actual File
            mediaType,
          })
        );

        setTimeout(() => {
          const currentSlide =
            store.getState().playlist.slides[selectedSlideIndex];

          const durationPromises = currentSlide.slots
            .filter(
              (slot) => slot.mediaType === "video" && slot.media instanceof File
            )
            .map((slot) => {
              return new Promise<number>((resolve) => {
                if (!(slot.media instanceof File)) {
                  return resolve(0); // Skip if media is not a File
                }

                const tempVid = document.createElement("video");
                tempVid.preload = "metadata";
                tempVid.src = URL.createObjectURL(slot.media); // âœ… now safe
                tempVid.onloadedmetadata = () => resolve(tempVid.duration);
                tempVid.onerror = () => resolve(0);
              });
            });

          Promise.all(durationPromises).then((durations) => {
            const maxDuration = Math.round(
              Math.max(...durations, uploadedDuration)
            );
            console.log(
              "ðŸ•’ Final slide duration (longest video):",
              maxDuration
            );

            dispatch(
              updateSlideAtIndex({
                index: selectedSlideIndex,
                updatedSlide: {
                  ...currentSlide,
                  duration: maxDuration,
                },
              })
            );
          });
        }, 100);
      };
    } else {
      dispatch(
        updateSlotInSlide({
          slideIndex: selectedSlideIndex,
          slotIndex,
          media, // âœ… the actual File
          mediaType,
        })
      );
    }
  };

  return handleMediaUpload;
};















///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  "name": "userdashboard",
  "version": "1.1.1",
  "private": true,
  "description": "User Dashboard -application",
  "author": "Devibrant",
  "type": "module",
  "main": "electron/main.js",
  "scripts": {
    "dev": "concurrently \"vite\" \"wait-on http://localhost:5174 && cross-env NODE_ENV=development electron electron/main.js\"",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint .",
    "electron": "electron electron/main.js",
    "start": "npm run dev",
    "build:app": "vite build",
    "pack": "npm run build:app && electron-builder"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^2.8.2",
    "node-machine-id": "^1.1.12",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.6.3"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.5.2",
    "concurrently": "^9.2.0",
    "cross-env": "^7.0.3",
    "electron": "^37.2.0",
    "electron-builder": "^26.0.12",
    "eslint": "^9.29.0",
    "vite": "^7.0.0",
    "wait-on": "^8.0.3"
  },
  "build": {
    "appId": "com.devibrant.userdashboard",
    "productName": "User Dashboard",
    "files": [
      "electron/**/*",
      "**/*.js",
      {
        "from": "dist",
        "to": "dist",
        "filter": [
          "**/*"
        ]
      }
    ],
    "asar": true,
    "asarUnpack": [
      "dist/**"
    ],
    "directories": {
      "buildResources": "assets"
    },
    "extraMetadata": {
      "main": "electron/main.js"
    },
    "win": {
      "target": "nsis"
    },
    "nsis": {
      "oneClick": false,
      "allowToChangeInstallationDirectory": true,
      "shortcutName": "User Dashboard",
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    }
  }
}





/////////////////////////////////////////////////////////APP.TSX/////////////////////




import { useEffect, useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

// Extend Window interface to define electronAPI
declare global {
  interface Window {
    electronAPI?: {
      sendLog?: (...args: any[]) => void;
      getMachineId?: () => Promise<string>;
    };
  }
}

// Override console.log to forward logs to Electron main process
const originalConsoleLog = console.log;
console.log = (...args: unknown[]) => {
  if (window.electronAPI?.sendLog) {
    window.electronAPI.sendLog(...args);
  }
  originalConsoleLog(...args);
};

function App() {
  const [count, setCount] = useState<number>(0);
  const [machineId, setMachineId] = useState<string>('');
  const [error, setError] = useState<string>('');

  useEffect(() => {
    if (window.electronAPI?.getMachineId) {
      console.log('electronAPI object exists');
      console.log('electronAPI.getMachineId is', typeof window.electronAPI.getMachineId);

      window.electronAPI.getMachineId()
        .then((id: string) => {
          setMachineId(id);
        })
        .catch(() => {
          setError('Failed to get Machine ID');
        });
    } else {
      setError('electronAPI.getMachineId not available');
    }
  }, []);

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank" rel="noreferrer">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank" rel="noreferrer">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React + Electron</h1>
      <div className="card">
        <button onClick={() => setCount((c) => c + 1)}>
          count is {count}
        </button>
        <p>
          Machine ID: <code>{machineId || error || 'Loading...'}</code>
        </p>
      </div>
    </>
  );
}

export default App;











import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
  useLocation,
} from "react-router-dom";
import ToolBar from "./layout/Tabbar";
import MediaContent from "./Screens/MediaContent/MediaContent";
import PlayList from "./Screens/Playlist/Normal/PlayList";
import LoginScreen from "./Screens/AuthScreens/LoginScreen";
import LicenseKey from "./../LicenseKey/LicenseKey";
import Test from "./Screens/Test";
import ScreenManagement from "./Screens/ScreenManagement/ScreenManagement";

function AppWrapper() {
  const location = useLocation();
  const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;

  const hideToolbarPaths = ["/login", "/license", "/playlist"];
  const shouldHideToolbar = hideToolbarPaths.includes(location.pathname);

  return (
    <div className="flex">
      {!shouldHideToolbar && <ToolBar />}
      <LicenseKey />

      
        <Routes>
          {/* Public routes (redirect to mediacontent if already logged in) */}
          <Route
            path="/"
            element={token ? <Navigate to="/mediacontent" replace /> : <LoginScreen />}
          />
          <Route
            path="/login"
            element={token ? <Navigate to="/mediacontent" replace /> : <LoginScreen />}
          />

          {/* Protected routes (redirect to login if not logged in) */}
          <Route
            path="/mediacontent"
            element={token ? <MediaContent /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/playlist"
            element={token ? <PlayList /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/screenmanagement"
            element={token ? <ScreenManagement /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/test"
            element={token ? <Test /> : <Navigate to="/login" replace />}
          />

          {/* Fallback */}
          <Route path="*" element={<Navigate to={token ? "/mediacontent" : "/login"} replace />} />
        </Routes>
    
    </div>
  );
}

export default function App() {
  return (
    <Router>
      <AppWrapper />
    </Router>
  );
}









import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import type { RootState } from "../../../../store";
import {
  addSlide,
  setSelectedSlideIndex,
  updateSlideAtIndex,
  reorderSlide,
} from "../../../Redux/Playlist/ToolBarFunc/NormalPlaylistSlice";
import { OneImageGridConfig } from "../../../Config/GridConfig/DefaultGridConfig";
import { Plus, Clock, ChevronUp, ChevronDown, ChevronLeft, ChevronRight } from "lucide-react";

const NormalSlider = () => {
  const dispatch = useDispatch();

  const playlistSlides = useSelector(
    (state: RootState) => state.playlist.slides
  );
  const selectedSlide = useSelector(
    (state: RootState) => state.playlist.selectedSlideIndex
  );

  const handleAddSlide = () => {
    const defaultSlide = {
      duration: 10,
      selectedGrid: "default",
      slots: OneImageGridConfig.slots.map((slot: any) => ({
        ...slot,
        media: null as string | null,
        mediaType: undefined as "image" | "video" | undefined,
      })),
    };

    const newIndex = playlistSlides.length;
    dispatch(addSlide(defaultSlide));
    dispatch(setSelectedSlideIndex(newIndex));
  };

  const handleDurationChange = (index: number, newDuration: number) => {
    const updatedSlide = { ...playlistSlides[index], duration: newDuration };
    dispatch(updateSlideAtIndex({ index, updatedSlide }));
  };

  // Jump/move a slide from index -> to index
  const handleReorder = (from: number, to: number) => {
    if (to < 0 || to >= playlistSlides.length || from === to) return;
    dispatch(reorderSlide({ from, to }));
    // keep focus on the moved slide
    dispatch(setSelectedSlideIndex(to));
  };

  // Initialize selection when slides first appear
  useEffect(() => {
    if (playlistSlides.length > 0 && selectedSlide === null) {
      dispatch(setSelectedSlideIndex(0));
    }
  }, [playlistSlides, selectedSlide, dispatch]);

  return (
    <section className="p-4 md:p-6 max-h-screen">
      <div className="mb-5 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <h2 className="text-lg md:text-xl font-semibold tracking-tight">
          Normal Slider
        </h2>

        <div className="flex items-center gap-3 flex-wrap">
          <span className="text-sm text-gray-600">
            Total slides: <b>{playlistSlides.length}</b>
          </span>

          <button
            onClick={handleAddSlide}
            className="inline-flex items-center gap-2 rounded-xl border border-gray-200 px-3 py-2 text-sm font-medium shadow-sm hover:shadow transition bg-white hover:bg-gray-50 active:scale-[0.99]"
            aria-label="Add current slide to playlist"
          >
            <Plus size={16} color="red" />
            Add slide
          </button>
        </div>
      </div>

      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3 md:gap-4">
        {playlistSlides.map((slide: any, index: number) => (
          <div
            key={index}
            onClick={() => dispatch(setSelectedSlideIndex(index))}
            aria-pressed={selectedSlide === index}
            className={`group cursor-pointer rounded-2xl border p-2 transition-all duration-200 bg-white
              ${
                selectedSlide === index
                  ? "border-red-500 ring-2 ring-red-200 shadow-md"
                  : "border-gray-200 hover:border-gray-300 hover:shadow-sm"
              }`}
          >
            {/* Preview */}
            <div className="w-full aspect-[7/5] overflow-hidden rounded-xl bg-white">
              {slide.slots[0]?.media ? (
                slide.slots[0].mediaType === "video" ? (
                  <div className="flex items-center justify-center w-full h-full text-xs font-medium">
                    <span className="inline-flex items-center gap-1 rounded-md bg-gray-900/80 px-2 py-1 text-white">
                      ðŸŽ¥ Video
                    </span>
                  </div>
                ) : (
                  <img
                    src={slide.slots[0].media as string}
                    alt={`Slide ${index + 1}`}
                    className="object-contain w-full h-full transition-transform duration-200 group-hover:scale-[1.02]"
                  />
                )
              ) : (
                <div className="flex items-center justify-center h-full text-gray-400 text-sm">
                  No media
                </div>
              )}
            </div>

            {/* Title */}
            <p className="text-center text-sm mt-2 font-medium">
              Slide {index + 1}
            </p>

            {/* Duration */}
            <div className="mt-2">
              <label className="mb-1 flex items-center justify-center gap-1 text-[11px] text-gray-500">
                <Clock size={12} /> Duration (sec)
              </label>
              <input
                type="number"
                min={1}
                step={1}
                inputMode="numeric"
                value={slide.duration}
                onChange={(e) =>
                  handleDurationChange(index, Number(e.target.value))
                }
                className="w-full rounded-lg border border-gray-200 bg-white px-2 py-1.5 text-center text-sm outline-none focus:border-red-400 focus:ring-2 focus:ring-red-200"
              />
            </div>

            {/* Reorder controls */}
            <div className="mt-3 grid grid-cols-3 gap-2">
              {/* Move Left */}
              <button
                type="button"
                onClick={(e) => {
                  e.stopPropagation();
                  handleReorder(index, index - 1);
                }}
                disabled={index === 0}
                className="inline-flex items-center justify-center rounded-lg border border-gray-200 bg-white px-2 py-1 hover:bg-gray-50 disabled:opacity-50"
                title="Move Left"
                aria-label="Move slide Left"
              >
                <ChevronLeft size={16} color="red"/>
              </button>

              {/* Jump to position (1..N) */}
              <input
                type="number"
                min={1}
                max={playlistSlides.length}
                value={index + 1}
                onClick={(e) => e.stopPropagation()}
                onChange={(e) => {
                  const desired = Number(e.target.value);
                  if (!Number.isFinite(desired)) return;
                  const to = Math.min(
                    Math.max(0, desired - 1),
                    playlistSlides.length - 1
                  );
                  if (to !== index) handleReorder(index, to);
                }}
                className="w-full rounded-lg border border-gray-200 bg-white px-2 py-1 text-center text-sm outline-none focus:border-red-400 focus:ring-2 focus:ring-red-200"
                title="Set slide position"
                aria-label="Set slide position"
              />

              {/* Move Right */}
              <button
                type="button"
                onClick={(e) => {
                  e.stopPropagation();
                  handleReorder(index, index + 1);
                }}
                disabled={index === playlistSlides.length - 1}
                className="inline-flex items-center justify-center rounded-lg border border-gray-200 bg-white px-2 py-1 hover:bg-gray-50 disabled:opacity-50"
                title="Move Right"
                aria-label="Move slide Right"
              >
                <ChevronRight size={16} color={"red"}/>
              </button>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
};

export default NormalSlider;







import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
  useLocation,
} from "react-router-dom";
import ToolBar from "./layout/Tabbar";
import MediaContent from "./Screens/MediaContent/MediaContent";
import PlayList from "./Screens/Playlist/Normal/PlayList";
import LoginScreen from "./Screens/AuthScreens/LoginScreen";
import LicenseKey from "./../LicenseKey/LicenseKey";
import Test from "./Screens/Test";
import ScreenManagement from "./Screens/ScreenManagement/ScreenManagement";

function AppWrapper() {
  const location = useLocation();
  const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;

  const hideToolbarPaths = ["/login", "/license", "/playlist"];
  const shouldHideToolbar = hideToolbarPaths.includes(location.pathname);

  return (
    <div className="flex">
      {!shouldHideToolbar && <ToolBar />}
      <LicenseKey />

      
        <Routes>
          {/* Public routes (redirect to mediacontent if already logged in) */}
          <Route
            path="/"
            element={token ? <Navigate to="/mediacontent" replace /> : <LoginScreen />}
          />
          <Route
            path="/login"
            element={token ? <Navigate to="/mediacontent" replace /> : <LoginScreen />}
          />

          {/* Protected routes (redirect to login if not logged in) */}
          <Route
            path="/mediacontent"
            element={token ? <MediaContent /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/playlist"
            element={token ? <PlayList /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/screenmanagement"
            element={token ? <ScreenManagement /> : <Navigate to="/login" replace />}
          />
          <Route
            path="/test"
            element={token ? <Test /> : <Navigate to="/login" replace />}
          />

          {/* Fallback */}
          <Route path="*" element={<Navigate to={token ? "/mediacontent" : "/login"} replace />} />
        </Routes>
    
    </div>
  );
}

export default function App() {
  return (
    <Router>
      <AppWrapper />
    </Router>
  );
}
