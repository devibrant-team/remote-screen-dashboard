{
  "name": "userdashboard",
  "version": "1.1.1",
  "private": true,
  "description": "User Dashboard -application",
  "author": "Devibrant",
  "type": "module",
  "main": "electron/main.js",
  "scripts": {
    "dev": "concurrently \"vite\" \"wait-on http://localhost:5174 && cross-env NODE_ENV=development electron electron/main.js\"",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint .",
    "electron": "electron electron/main.js",
    "start": "npm run dev",
    "build:app": "vite build",
    "pack": "npm run build:app && electron-builder"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^2.8.2",
    "node-machine-id": "^1.1.12",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.6.3"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.5.2",
    "concurrently": "^9.2.0",
    "cross-env": "^7.0.3",
    "electron": "^37.2.0",
    "electron-builder": "^26.0.12",
    "eslint": "^9.29.0",
    "vite": "^7.0.0",
    "wait-on": "^8.0.3"
  },
  "build": {
    "appId": "com.devibrant.userdashboard",
    "productName": "User Dashboard",
    "files": [
      "electron/**/*",
      "**/*.js",
      {
        "from": "dist",
        "to": "dist",
        "filter": [
          "**/*"
        ]
      }
    ],
    "asar": true,
    "asarUnpack": [
      "dist/**"
    ],
    "directories": {
      "buildResources": "assets"
    },
    "extraMetadata": {
      "main": "electron/main.js"
    },
    "win": {
      "target": "nsis"
    },
    "nsis": {
      "oneClick": false,
      "allowToChangeInstallationDirectory": true,
      "shortcutName": "User Dashboard",
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true
    }
  }
}





/////////////////////////////////////////////////////////APP.TSX/////////////////////




import { useEffect, useState } from 'react';
import reactLogo from './assets/react.svg';
import viteLogo from '/vite.svg';
import './App.css';

// Extend Window interface to define electronAPI
declare global {
  interface Window {
    electronAPI?: {
      sendLog?: (...args: any[]) => void;
      getMachineId?: () => Promise<string>;
    };
  }
}

// Override console.log to forward logs to Electron main process
const originalConsoleLog = console.log;
console.log = (...args: unknown[]) => {
  if (window.electronAPI?.sendLog) {
    window.electronAPI.sendLog(...args);
  }
  originalConsoleLog(...args);
};

function App() {
  const [count, setCount] = useState<number>(0);
  const [machineId, setMachineId] = useState<string>('');
  const [error, setError] = useState<string>('');

  useEffect(() => {
    if (window.electronAPI?.getMachineId) {
      console.log('electronAPI object exists');
      console.log('electronAPI.getMachineId is', typeof window.electronAPI.getMachineId);

      window.electronAPI.getMachineId()
        .then((id: string) => {
          setMachineId(id);
        })
        .catch(() => {
          setError('Failed to get Machine ID');
        });
    } else {
      setError('electronAPI.getMachineId not available');
    }
  }, []);

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank" rel="noreferrer">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank" rel="noreferrer">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React + Electron</h1>
      <div className="card">
        <button onClick={() => setCount((c) => c + 1)}>
          count is {count}
        </button>
        <p>
          Machine ID: <code>{machineId || error || 'Loading...'}</code>
        </p>
      </div>
    </>
  );
}

export default App;
